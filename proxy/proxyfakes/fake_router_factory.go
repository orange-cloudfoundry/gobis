// Code generated by counterfeiter. DO NOT EDIT.
package proxyfakes

import (
	"net/http"
	"net/url"
	"sync"

	"github.com/gorilla/mux"
	"github.com/orange-cloudfoundry/gobis/models"
	"github.com/orange-cloudfoundry/gobis/proxy"
)

type FakeRouterFactory struct {
	CreateMuxRouterRouteServiceStub        func([]models.ProxyRoute, string, *url.URL) (*mux.Router, error)
	createMuxRouterRouteServiceMutex       sync.RWMutex
	createMuxRouterRouteServiceArgsForCall []struct {
		arg1 []models.ProxyRoute
		arg2 string
		arg3 *url.URL
	}
	createMuxRouterRouteServiceReturns struct {
		result1 *mux.Router
		result2 error
	}
	createMuxRouterRouteServiceReturnsOnCall map[int]struct {
		result1 *mux.Router
		result2 error
	}
	CreateMuxRouterStub        func([]models.ProxyRoute, string) (*mux.Router, error)
	createMuxRouterMutex       sync.RWMutex
	createMuxRouterArgsForCall []struct {
		arg1 []models.ProxyRoute
		arg2 string
	}
	createMuxRouterReturns struct {
		result1 *mux.Router
		result2 error
	}
	createMuxRouterReturnsOnCall map[int]struct {
		result1 *mux.Router
		result2 error
	}
	CreateForwardHandlerStub        func(models.ProxyRoute) (http.HandlerFunc, error)
	createForwardHandlerMutex       sync.RWMutex
	createForwardHandlerArgsForCall []struct {
		arg1 models.ProxyRoute
	}
	createForwardHandlerReturns struct {
		result1 http.HandlerFunc
		result2 error
	}
	createForwardHandlerReturnsOnCall map[int]struct {
		result1 http.HandlerFunc
		result2 error
	}
	CreateHttpHandlerStub        func(models.ProxyRoute) (http.Handler, error)
	createHttpHandlerMutex       sync.RWMutex
	createHttpHandlerArgsForCall []struct {
		arg1 models.ProxyRoute
	}
	createHttpHandlerReturns struct {
		result1 http.Handler
		result2 error
	}
	createHttpHandlerReturnsOnCall map[int]struct {
		result1 http.Handler
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouterFactory) CreateMuxRouterRouteService(arg1 []models.ProxyRoute, arg2 string, arg3 *url.URL) (*mux.Router, error) {
	var arg1Copy []models.ProxyRoute
	if arg1 != nil {
		arg1Copy = make([]models.ProxyRoute, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createMuxRouterRouteServiceMutex.Lock()
	ret, specificReturn := fake.createMuxRouterRouteServiceReturnsOnCall[len(fake.createMuxRouterRouteServiceArgsForCall)]
	fake.createMuxRouterRouteServiceArgsForCall = append(fake.createMuxRouterRouteServiceArgsForCall, struct {
		arg1 []models.ProxyRoute
		arg2 string
		arg3 *url.URL
	}{arg1Copy, arg2, arg3})
	fake.recordInvocation("CreateMuxRouterRouteService", []interface{}{arg1Copy, arg2, arg3})
	fake.createMuxRouterRouteServiceMutex.Unlock()
	if fake.CreateMuxRouterRouteServiceStub != nil {
		return fake.CreateMuxRouterRouteServiceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createMuxRouterRouteServiceReturns.result1, fake.createMuxRouterRouteServiceReturns.result2
}

func (fake *FakeRouterFactory) CreateMuxRouterRouteServiceCallCount() int {
	fake.createMuxRouterRouteServiceMutex.RLock()
	defer fake.createMuxRouterRouteServiceMutex.RUnlock()
	return len(fake.createMuxRouterRouteServiceArgsForCall)
}

func (fake *FakeRouterFactory) CreateMuxRouterRouteServiceArgsForCall(i int) ([]models.ProxyRoute, string, *url.URL) {
	fake.createMuxRouterRouteServiceMutex.RLock()
	defer fake.createMuxRouterRouteServiceMutex.RUnlock()
	return fake.createMuxRouterRouteServiceArgsForCall[i].arg1, fake.createMuxRouterRouteServiceArgsForCall[i].arg2, fake.createMuxRouterRouteServiceArgsForCall[i].arg3
}

func (fake *FakeRouterFactory) CreateMuxRouterRouteServiceReturns(result1 *mux.Router, result2 error) {
	fake.CreateMuxRouterRouteServiceStub = nil
	fake.createMuxRouterRouteServiceReturns = struct {
		result1 *mux.Router
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterFactory) CreateMuxRouterRouteServiceReturnsOnCall(i int, result1 *mux.Router, result2 error) {
	fake.CreateMuxRouterRouteServiceStub = nil
	if fake.createMuxRouterRouteServiceReturnsOnCall == nil {
		fake.createMuxRouterRouteServiceReturnsOnCall = make(map[int]struct {
			result1 *mux.Router
			result2 error
		})
	}
	fake.createMuxRouterRouteServiceReturnsOnCall[i] = struct {
		result1 *mux.Router
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterFactory) CreateMuxRouter(arg1 []models.ProxyRoute, arg2 string) (*mux.Router, error) {
	var arg1Copy []models.ProxyRoute
	if arg1 != nil {
		arg1Copy = make([]models.ProxyRoute, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createMuxRouterMutex.Lock()
	ret, specificReturn := fake.createMuxRouterReturnsOnCall[len(fake.createMuxRouterArgsForCall)]
	fake.createMuxRouterArgsForCall = append(fake.createMuxRouterArgsForCall, struct {
		arg1 []models.ProxyRoute
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("CreateMuxRouter", []interface{}{arg1Copy, arg2})
	fake.createMuxRouterMutex.Unlock()
	if fake.CreateMuxRouterStub != nil {
		return fake.CreateMuxRouterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createMuxRouterReturns.result1, fake.createMuxRouterReturns.result2
}

func (fake *FakeRouterFactory) CreateMuxRouterCallCount() int {
	fake.createMuxRouterMutex.RLock()
	defer fake.createMuxRouterMutex.RUnlock()
	return len(fake.createMuxRouterArgsForCall)
}

func (fake *FakeRouterFactory) CreateMuxRouterArgsForCall(i int) ([]models.ProxyRoute, string) {
	fake.createMuxRouterMutex.RLock()
	defer fake.createMuxRouterMutex.RUnlock()
	return fake.createMuxRouterArgsForCall[i].arg1, fake.createMuxRouterArgsForCall[i].arg2
}

func (fake *FakeRouterFactory) CreateMuxRouterReturns(result1 *mux.Router, result2 error) {
	fake.CreateMuxRouterStub = nil
	fake.createMuxRouterReturns = struct {
		result1 *mux.Router
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterFactory) CreateMuxRouterReturnsOnCall(i int, result1 *mux.Router, result2 error) {
	fake.CreateMuxRouterStub = nil
	if fake.createMuxRouterReturnsOnCall == nil {
		fake.createMuxRouterReturnsOnCall = make(map[int]struct {
			result1 *mux.Router
			result2 error
		})
	}
	fake.createMuxRouterReturnsOnCall[i] = struct {
		result1 *mux.Router
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterFactory) CreateForwardHandler(arg1 models.ProxyRoute) (http.HandlerFunc, error) {
	fake.createForwardHandlerMutex.Lock()
	ret, specificReturn := fake.createForwardHandlerReturnsOnCall[len(fake.createForwardHandlerArgsForCall)]
	fake.createForwardHandlerArgsForCall = append(fake.createForwardHandlerArgsForCall, struct {
		arg1 models.ProxyRoute
	}{arg1})
	fake.recordInvocation("CreateForwardHandler", []interface{}{arg1})
	fake.createForwardHandlerMutex.Unlock()
	if fake.CreateForwardHandlerStub != nil {
		return fake.CreateForwardHandlerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createForwardHandlerReturns.result1, fake.createForwardHandlerReturns.result2
}

func (fake *FakeRouterFactory) CreateForwardHandlerCallCount() int {
	fake.createForwardHandlerMutex.RLock()
	defer fake.createForwardHandlerMutex.RUnlock()
	return len(fake.createForwardHandlerArgsForCall)
}

func (fake *FakeRouterFactory) CreateForwardHandlerArgsForCall(i int) models.ProxyRoute {
	fake.createForwardHandlerMutex.RLock()
	defer fake.createForwardHandlerMutex.RUnlock()
	return fake.createForwardHandlerArgsForCall[i].arg1
}

func (fake *FakeRouterFactory) CreateForwardHandlerReturns(result1 http.HandlerFunc, result2 error) {
	fake.CreateForwardHandlerStub = nil
	fake.createForwardHandlerReturns = struct {
		result1 http.HandlerFunc
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterFactory) CreateForwardHandlerReturnsOnCall(i int, result1 http.HandlerFunc, result2 error) {
	fake.CreateForwardHandlerStub = nil
	if fake.createForwardHandlerReturnsOnCall == nil {
		fake.createForwardHandlerReturnsOnCall = make(map[int]struct {
			result1 http.HandlerFunc
			result2 error
		})
	}
	fake.createForwardHandlerReturnsOnCall[i] = struct {
		result1 http.HandlerFunc
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterFactory) CreateHttpHandler(arg1 models.ProxyRoute) (http.Handler, error) {
	fake.createHttpHandlerMutex.Lock()
	ret, specificReturn := fake.createHttpHandlerReturnsOnCall[len(fake.createHttpHandlerArgsForCall)]
	fake.createHttpHandlerArgsForCall = append(fake.createHttpHandlerArgsForCall, struct {
		arg1 models.ProxyRoute
	}{arg1})
	fake.recordInvocation("CreateHttpHandler", []interface{}{arg1})
	fake.createHttpHandlerMutex.Unlock()
	if fake.CreateHttpHandlerStub != nil {
		return fake.CreateHttpHandlerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createHttpHandlerReturns.result1, fake.createHttpHandlerReturns.result2
}

func (fake *FakeRouterFactory) CreateHttpHandlerCallCount() int {
	fake.createHttpHandlerMutex.RLock()
	defer fake.createHttpHandlerMutex.RUnlock()
	return len(fake.createHttpHandlerArgsForCall)
}

func (fake *FakeRouterFactory) CreateHttpHandlerArgsForCall(i int) models.ProxyRoute {
	fake.createHttpHandlerMutex.RLock()
	defer fake.createHttpHandlerMutex.RUnlock()
	return fake.createHttpHandlerArgsForCall[i].arg1
}

func (fake *FakeRouterFactory) CreateHttpHandlerReturns(result1 http.Handler, result2 error) {
	fake.CreateHttpHandlerStub = nil
	fake.createHttpHandlerReturns = struct {
		result1 http.Handler
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterFactory) CreateHttpHandlerReturnsOnCall(i int, result1 http.Handler, result2 error) {
	fake.CreateHttpHandlerStub = nil
	if fake.createHttpHandlerReturnsOnCall == nil {
		fake.createHttpHandlerReturnsOnCall = make(map[int]struct {
			result1 http.Handler
			result2 error
		})
	}
	fake.createHttpHandlerReturnsOnCall[i] = struct {
		result1 http.Handler
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMuxRouterRouteServiceMutex.RLock()
	defer fake.createMuxRouterRouteServiceMutex.RUnlock()
	fake.createMuxRouterMutex.RLock()
	defer fake.createMuxRouterMutex.RUnlock()
	fake.createForwardHandlerMutex.RLock()
	defer fake.createForwardHandlerMutex.RUnlock()
	fake.createHttpHandlerMutex.RLock()
	defer fake.createHttpHandlerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouterFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ proxy.RouterFactory = new(FakeRouterFactory)
