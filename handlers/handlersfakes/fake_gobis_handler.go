// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"net/http"
	"sync"

	"github.com/orange-cloudfoundry/gobis/handlers"
)

type FakeGobisHandler struct {
	GetServerAddrStub        func() string
	getServerAddrMutex       sync.RWMutex
	getServerAddrArgsForCall []struct{}
	getServerAddrReturns     struct {
		result1 string
	}
	getServerAddrReturnsOnCall map[int]struct {
		result1 string
	}
	ServeHTTPStub        func(http.ResponseWriter, *http.Request)
	serveHTTPMutex       sync.RWMutex
	serveHTTPArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGobisHandler) GetServerAddr() string {
	fake.getServerAddrMutex.Lock()
	ret, specificReturn := fake.getServerAddrReturnsOnCall[len(fake.getServerAddrArgsForCall)]
	fake.getServerAddrArgsForCall = append(fake.getServerAddrArgsForCall, struct{}{})
	fake.recordInvocation("GetServerAddr", []interface{}{})
	fake.getServerAddrMutex.Unlock()
	if fake.GetServerAddrStub != nil {
		return fake.GetServerAddrStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getServerAddrReturns.result1
}

func (fake *FakeGobisHandler) GetServerAddrCallCount() int {
	fake.getServerAddrMutex.RLock()
	defer fake.getServerAddrMutex.RUnlock()
	return len(fake.getServerAddrArgsForCall)
}

func (fake *FakeGobisHandler) GetServerAddrReturns(result1 string) {
	fake.GetServerAddrStub = nil
	fake.getServerAddrReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeGobisHandler) GetServerAddrReturnsOnCall(i int, result1 string) {
	fake.GetServerAddrStub = nil
	if fake.getServerAddrReturnsOnCall == nil {
		fake.getServerAddrReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getServerAddrReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeGobisHandler) ServeHTTP(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.serveHTTPMutex.Lock()
	fake.serveHTTPArgsForCall = append(fake.serveHTTPArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	fake.recordInvocation("ServeHTTP", []interface{}{arg1, arg2})
	fake.serveHTTPMutex.Unlock()
	if fake.ServeHTTPStub != nil {
		fake.ServeHTTPStub(arg1, arg2)
	}
}

func (fake *FakeGobisHandler) ServeHTTPCallCount() int {
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	return len(fake.serveHTTPArgsForCall)
}

func (fake *FakeGobisHandler) ServeHTTPArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	return fake.serveHTTPArgsForCall[i].arg1, fake.serveHTTPArgsForCall[i].arg2
}

func (fake *FakeGobisHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getServerAddrMutex.RLock()
	defer fake.getServerAddrMutex.RUnlock()
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGobisHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.GobisHandler = new(FakeGobisHandler)
